{
    "collab_server" : "",
    "contents" : "################################################################################\n## functions to set initial values and take information from r_state\n## when available\n################################################################################\n\n## options to set for debugging\n# options(shiny.trace = TRUE)\n# options(shiny.reactlog = TRUE)\n# options(shiny.error = recover)\n# options(warn = 2)\n# options(warn = 0)\n## turn off warnings globally\n# options(warn=-1)\n\n## set autoreload on if found TRUE in .Rprofile\n# options(\"autoreload\")[[1]] %>%\n#   {options(shiny.autoreload = ifelse (!is.null(.) && ., TRUE, FALSE))}\n\ninit_state <- function(r_data) {\n\n  ## initial plot height and width\n  r_data$plot_height <- 600\n  r_data$plot_width <- 600\n\n  # r_data$manual <- FALSE\n  r_data$vim_keys <- FALSE\n\n  ## Joe Cheng: \"Datasets can change over time (i.e., the .changedata function).\n  ## Therefore, the data need to be a reactive value so the other reactive\n  ## functions and outputs that depend on these datasets will know when they\n  ## are changed.\"\n  robj <- load(file.path(r_path,\"base/data/diamonds.rda\"))\n  df <- get(robj)\n  r_data[[\"diamonds\"]] <- df\n  r_data[[\"diamonds_descr\"]] <- attr(df,'description')\n  r_data$datasetlist <- c(\"diamonds\")\n  r_data$url <- NULL\n  r_data\n}\n\nremove_session_files <- function(st = Sys.time()) {\n  fl <- list.files(normalizePath(\"~/r_sessions/\"), pattern = \"*.rds\",\n                   full.names = TRUE)\n\n  for (f in fl) {\n    if (difftime(st, file.mtime(f), units = \"days\") > 7)\n      unlink(f, force = TRUE)\n  }\n}\n\nremove_session_files()\n\n## from Joe Cheng's https://github.com/jcheng5/shiny-resume/blob/master/session.R\nisolate({\n  prevSSUID <- parseQueryString(session$clientData$url_search)[[\"SSUID\"]]\n})\n\nmost_recent_session_file <- function() {\n  fl <- list.files(normalizePath(\"~/r_sessions/\"), pattern = \"*.rds\",\n                   full.names = TRUE)\n\n  if (length(fl) > 0) {\n    data.frame(fn = fl, dt = file.mtime(fl)) %>% arrange(desc(dt)) %>%\n    slice(1) %>% .[[\"fn\"]] %>% as.character %>% basename %>%\n    gsub(\"r_(.*).rds\",\"\\\\1\",.)\n  } else {\n    NULL\n  }\n}\n\n## set the session id\nr_ssuid <-\n  if (r_local) {\n    if (is.null(prevSSUID)) {\n      mrsf <- most_recent_session_file()\n      paste0(\"local-\",shiny:::createUniqueId(3))\n    } else {\n      mrsf <- \"0000\"\n      prevSSUID\n    }\n  } else {\n    ifelse (is.null(prevSSUID), shiny:::createUniqueId(5), prevSSUID)\n  }\n\n## (re)start the session and push the id into the url\nsession$sendCustomMessage(\"session_start\", r_ssuid)\n\n## load for previous state if available but look in global memory first\nif (exists(\"r_state\") && exists(\"r_data\")) {\n  r_data  <- do.call(reactiveValues, r_data)\n  r_state <- r_state\n  rm(r_data, r_state, envir = .GlobalEnv)\n} else if (!is.null(r_sessions[[r_ssuid]]$r_data)) {\n  r_data  <- do.call(reactiveValues, r_sessions[[r_ssuid]]$r_data)\n  r_state <- r_sessions[[r_ssuid]]$r_state\n} else if (file.exists(paste0(\"~/r_sessions/r_\", r_ssuid, \".rds\"))) {\n  ## read from file if not in global\n  fn <- paste0(normalizePath(\"~/r_sessions\"),\"/r_\", r_ssuid, \".rds\")\n\n  rs <- try(readRDS(fn), silent = TRUE)\n  if (is(rs, 'try-error')) {\n    r_data  <- init_state(reactiveValues())\n    r_state <- list()\n  } else {\n    if (length(rs$r_data) == 0)\n      r_data  <- init_state(reactiveValues())\n    else\n      r_data  <- do.call(reactiveValues, rs$r_data)\n\n    if (length(rs$r_state) == 0)\n      r_state <- list()\n    else\n      r_state <- rs$r_state\n  }\n\n  unlink(fn, force = TRUE)\n  rm(rs)\n} else if (r_local && file.exists(paste0(\"~/r_sessions/r_\", mrsf, \".rds\"))) {\n\n  ## restore from local folder but assign new ssuid\n  fn <- paste0(normalizePath(\"~/r_sessions\"),\"/r_\", mrsf, \".rds\")\n\n  rs <- try(readRDS(fn), silent = TRUE)\n  if (is(rs, 'try-error')) {\n    r_data  <- init_state(reactiveValues())\n    r_state <- list()\n  } else {\n    if (length(rs$r_data) == 0)\n      r_data  <- init_state(reactiveValues())\n    else\n      r_data  <- do.call(reactiveValues, rs$r_data)\n\n    if (length(rs$r_state) == 0)\n      r_state <- list()\n    else\n      r_state <- rs$r_state\n  }\n\n  ## don't navigate to same tab in case the app locks again\n  r_state$nav_radiant <- NULL\n\n  unlink(fn, force = TRUE)\n  rm(rs)\n} else {\n  r_data  <- init_state(reactiveValues())\n  r_state <- list()\n}\n\n## identify the shiny environment\nr_env <- environment()\n\n## turning of vim_keys on load unless it is set in options\nvk <- options(\"vim_keys\")[[1]]\nr_data$vim_keys <- ifelse (!is.null(vk) && vk, TRUE, FALSE)\n\nif (r_local) {\n  ## adding any data.frame from the global environment to r_data should not affect\n  ## memory usage ... at least until the entry in r_data is changed\n  df_list <- sapply(mget(ls(envir = .GlobalEnv), envir = .GlobalEnv), is.data.frame) %>%\n    { names(.[.]) }\n\n  for (df in df_list) {\n    isolate({\n      r_data[[df]] <- get(df, envir = .GlobalEnv)\n      r_data[[paste0(df,\"_descr\")]] <- attr(r_data[[df]],'description') %>%\n        { if (is.null(.)) \"No description provided. Please use Radiant to add an overview of the data in markdown format.\\n Check the 'Add/edit data description' box on the left of your screen\" else . }\n      r_data$datasetlist %<>% c(df, .) %>% unique\n    })\n  }\n}\n\n#####################################\n## url processing to share results\n#####################################\n\n## relevant links\n# http://stackoverflow.com/questions/25306519/shiny-saving-url-state-subpages-and-tabs/25385474#25385474\n# https://groups.google.com/forum/#!topic/shiny-discuss/Xgxq08N8HBE\n# https://gist.github.com/jcheng5/5427d6f264408abf3049\n\n## try http://127.0.0.1:3174/?url=decide/simulate/&SSUID=local\nurl_list <-\n  list(\"Data\" = list(\"tabs_data\" = list(\"Manage\"    = \"data/\",\n                                        \"View\"      = \"data/view/\",\n                                        \"Visualize\" = \"data/visualize/\",\n                                        \"Pivot\"     = \"data/pivot/\",\n                                        \"Explore\"   = \"data/explore/\",\n                                        \"Transform\" = \"data/transform/\",\n                                        \"Combine\"   = \"data/combine/\")),\n\n       \"Sampling\"    = \"sample/sampling/\",\n       \"Sample size (single)\" = \"sample/sample-size/\",\n       \"Sample size (compare)\" = \"sample/sample-size-comp/\",\n\n       \"Single mean\" = list(\"tabs_single_mean\" = list(\"Summary\" = \"base/single-mean/\",\n                                                      \"Plot\"    = \"base/single-mean/plot/\")),\n\n       \"Compare means\" = list(\"tabs_compare_means\" = list(\"Summary\" = \"base/compare-means/\",\n                                                          \"Plot\"    = \"base/compare-means/plot/\")),\n\n       \"Single proportion\" = list(\"tabs_single_prop\" = list(\"Summary\" = \"base/single-prop/\",\n                                                            \"Plot\"    = \"base/single-prop/plot/\")),\n\n       \"Compare proportions\" = list(\"tabs_compare_props\" = list(\"Summary\" = \"base/compare-props/\",\n                                                                \"Plot\"    = \"base/compare-props/plot/\")),\n\n       \"Cross-tabs\" = list(\"tabs_cross_tabs\" = list(\"Summary\" = \"base/cross-tabs/\",\n                                                     \"Plot\"    = \"base/cross-tabs/plot/\")),\n\n       \"Correlation\" = list(\"tabs_correlation\" = list(\"Summary\" = \"regression/correlation/\",\n                                                      \"Plot\"    = \"regression/correlation/plot/\")),\n\n       \"Linear regression (OLS)\" = list(\"tabs_regression\" = list(\"Summary\" = \"regression/linear/\",\n                                                      \"Predict\" = \"regression/linear/predict/\",\n                                                      \"Plot\"    = \"regression/linear/plot/\")),\n\n       \"Logistic regression (GLM)\" = list(\"tabs_glm_reg\" = list(\"Summary\" = \"regression/glm/\",\n                                          \"Predict\" = \"regression/glm/predict/\",\n                                          \"Plot\"    = \"regression/glm/plot/\")),\n\n       \"Neural Network (ANN)\" = list(\"tabs_ann\" = list(\"Summary\" = \"model/ann/\",\n                                                       \"Plot\" = \"model/ann/plot/\")),\n\n       \"Collaborative Filtering\" = list(\"tabs_crs\" = list(\"Summary\" = \"model/crs/\",\n                                                          \"Plot\" = \"model/crs/plot/\")),\n\n       \"Design of Experiments (DOE)\" = \"model/doe/\",\n\n       \"Model performance\" = list(\"tabs_performance\" = list(\"Summary\" = \"model/performance/\",\n                                                            \"Plot\" = \"model/performance/plot/\")),\n\n       \"Decision tree\" = list(\"tabs_dtree\" = list(\"Model\" = \"decide/dtree/\",\n                                                  \"Plot\"  = \"decide/dtree/plot/\")),\n\n       \"Simulate\" = list(\"tabs_simulate\" = list(\"Simulate\" = \"decide/simulate/\",\n                                                \"Plot (simulate)\" = \"decide/simulate/plot/\",\n                                                \"Repeat\" = \"decide/simulate/repeat/\",\n                                                \"Plot (repeat)\" = \"decide/simulate/repeat/plot/\")),\n\n       \"(Dis)similarity\" = list(\"tabs_mds\" = list(\"Summary\" = \"maps/mds/\",\n                                                  \"Plot\" = \"maps/mds/plot/\")),\n\n       \"Attributes\" = list(\"tabs_pmap\" = list(\"Summary\" = \"maps/pmap/\",\n                                              \"Plot\" = \"maps/pmap/plot/\"))\n  )\n\n## generate url patterns for navigation\nurl_patterns <- list()\nfor (i in names(url_list)) {\n  res <- url_list[[i]]\n  if (!is.list(res)) {\n    url_patterns[[res]] <- list(\"nav_radiant\" = i)\n  } else {\n    tabs <- names(res)\n    for (j in names(res[[tabs]])) {\n      url <- res[[tabs]][[j]]\n      url_patterns[[url]] <- setNames(list(i,j), c(\"nav_radiant\",tabs))\n    }\n  }\n}\n\nif (!exists(\"r_knitr\")) {\n  r_knitr <- if (exists(\"r_env\")) new.env(parent = r_env) else new.env()\n}\n\n## parse the url and use updateTabsetPanel to navigate to the desired tab\n# observe({\nobserveEvent(session$clientData$url_search, {\n  url_query <- parseQueryString(session$clientData$url_search)\n  if (\"url\" %in% names(url_query)) {\n    r_data$url <- url_query$url\n  } else if (is_empty(r_data$url)) {\n    return()\n  }\n\n  ## create an observer and suspend when done\n  url_observe <- observe({\n    if (is.null(input$dataset)) return()\n    url <- url_patterns[[r_data$url]]\n    if (is.null(url)) {\n      ## if pattern not found suspend observer\n      url_observe$suspend()\n      return()\n    }\n    ## move through the url\n    for (u in names(url)) {\n      if (is.null(input[[u]])) return()\n      if (input[[u]] != url[[u]])\n        updateTabsetPanel(session, u, selected = url[[u]])\n      if (names(tail(url,1)) == u) url_observe$suspend()\n    }\n  })\n})\n\n## keeping track of the main tab we are on\nobserveEvent(input$nav_radiant, {\n  # if (is_empty(input$nav_radiant)) return()\n  if (input$nav_radiant != \"Stop\" && input$nav_radiant != \"Refresh\")\n    r_data$nav_radiant <- input$nav_radiant\n})\n\n## Jump to the page you were on\n## only goes two layers deep at this point\nif (!is.null(r_state$nav_radiant)) {\n\n  ## don't return-to-the-spot if that was quit or stop\n  if (r_state$nav_radiant %in% c(\"Refresh\",\"Stop\")) return()\n\n  ## naming the observer so we can suspend it when done\n  nav_observe <- observe({\n    ## needed to avoid errors when no data is available yet\n    if (is.null(input$dataset)) return()\n    updateTabsetPanel(session, \"nav_radiant\", selected = r_state$nav_radiant)\n\n    ## check if shiny set the main tab to the desired value\n    if (is.null(input$nav_radiant)) return()\n    if (input$nav_radiant != r_state$nav_radiant) return()\n    nav_radiant_tab <- url_list[[r_state$nav_radiant]] %>% names\n\n    if (!is.null(nav_radiant_tab) && !is.null(r_state[[nav_radiant_tab]]))\n      updateTabsetPanel(session, nav_radiant_tab, selected = r_state[[nav_radiant_tab]])\n\n    ## once you arrive at the desired tab suspend the observer\n    nav_observe$suspend()\n  })\n}\n\n# ## 'sourcing' radiant's package functions in the server.R environment\n# if (!\"package:radiant\" %in% search()) {\n#   ## for shiny-server\n#   if (r_path == \"..\") {\n#     for (file in list.files(\"../../R\",\n#         pattern=\"\\\\.(r|R)$\",\n#         full.names = TRUE)) {\n# \n#       source(file, encoding = r_encoding, local = TRUE)\n#     }\n#   } else {\n#     ## for shinyapps.io\n#     radiant::copy_all(radiant)\n#     set_class <- radiant::set_class         ## needed but not clear why\n#     environment(set_class) <- environment() ## needed but not clear why\n#   }\n# } else {\n#   ## for use with launcher\n#   radiant::copy_all(radiant)\n#   set_class <- radiant::set_class         ## needed but not clear why\n#   environment(set_class) <- environment() ## needed but not clear why\n# }\n\nradiant::copy_all(radiant)\nset_class <- radiant::set_class         ## needed but not clear why\nenvironment(set_class) <- environment() ## needed but not clear why\n",
    "created" : 1460622217445.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4080104722",
    "id" : "AAD6B571",
    "lastKnownWriteTime" : 1460623464,
    "last_content_update" : 1460623464868,
    "path" : "~/Github/ACIT-Team-Reporting_Radiant/init.R",
    "project_path" : "init.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}