{
    "collab_server" : "",
    "contents" : "################################################################################\n## function to save app state on refresh or crash\n################################################################################\n\nsaveSession <- function(session = session) {\n  if (!exists(\"r_sessions\")) return()\n  if (exists(\"r_state\") && !is_empty(r_state)) {\n    rs <- r_state\n    rs_input <- reactiveValuesToList(input)\n    rs[names(rs_input)] <- rs_input\n  } else {\n    rs <- reactiveValuesToList(input)\n  }\n\n  r_sessions[[r_ssuid]] <- list(\n    r_data    = reactiveValuesToList(r_data),\n    r_state = rs,\n    timestamp = Sys.time()\n  )\n\n  ## saving session information to file\n  fn <- paste0(normalizePath(\"~/r_sessions\"),\"/r_\", r_ssuid, \".rds\")\n  saveRDS(r_sessions[[r_ssuid]], file = fn)\n}\n\nobserveEvent(input$refresh_radiant, {\n  if (r_local) {\n    fn <- normalizePath(\"~/r_sessions\")\n    file.remove(list.files(fn, full.names = TRUE))\n  } else {\n    fn <- paste0(normalizePath(\"~/r_sessions\"),\"/r_\", r_ssuid, \".rds\")\n    if (file.exists(fn)) unlink(fn, force = TRUE)\n  }\n\n  try(r_ssuid <- NULL, silent = TRUE)\n})\n\nsaveStateOnRefresh <- function(session = session) {\n  session$onSessionEnded(function() {\n    isolate({\n      url_query <- parseQueryString(session$clientData$url_search)\n      if (not_pressed(input$refresh_radiant) && not_pressed(input$stop_radiant) &&\n          is.null(input$uploadState) && !\"fixed\" %in% names(url_query)) {\n        saveSession(session)\n      } else {\n        if (is.null(input$uploadState)) {\n          if (exists(\"r_sessions\")) {\n            sshhr(try(r_sessions[[r_ssuid]] <- NULL, silent = TRUE))\n            sshhr(try(rm(r_ssuid), silent = TRUE))\n          }\n        }\n      }\n    })\n  })\n}\n\n################################################################\n## functions used across tools in radiant\n################################################################\n\n## get active dataset and apply data-filter if available\n.getdata <- reactive({\n  req(input$dataset)\n  # if (is.null(input$dataset)) return()\n\n  selcom <- input$data_filter %>% gsub(\"\\\\n\",\"\", .) %>% gsub(\"\\\"\",\"\\'\",.)\n  if (is_empty(selcom) || input$show_filter == FALSE) {\n    isolate(r_data$filter_error <- \"\")\n  } else if (grepl(\"([^=!<>])=([^=])\",selcom)) {\n    isolate(r_data$filter_error <- \"Invalid filter: never use = in a filter but == (e.g., year == 2014). Update or remove the expression\")\n  } else {\n    seldat <- try(filter_(r_data[[input$dataset]], selcom), silent = TRUE)\n    if (is(seldat, 'try-error')) {\n      isolate(r_data$filter_error <- paste0(\"Invalid filter: \\\"\", attr(seldat,\"condition\")$message,\"\\\". Update or remove the expression\"))\n    } else {\n      isolate(r_data$filter_error <- \"\")\n      if (\"grouped_df\" %in% class(seldat)) {\n        return(droplevels(ungroup(seldat)))\n      } else {\n        return(droplevels(seldat))\n      }\n    }\n  }\n\n  if (\"grouped_df\" %in% class(r_data[[input$dataset]])) {\n    ungroup(r_data[[input$dataset]])\n  } else {\n    r_data[[input$dataset]]\n  }\n})\n\n## same as .getdata but without filters etc.\n.getdata_transform <- reactive({\n  if (is.null(input$dataset)) return()\n  if (\"grouped_df\" %in% class(r_data[[input$dataset]])) {\n    ungroup(r_data[[input$dataset]])\n  } else {\n    r_data[[input$dataset]]\n  }\n})\n\n.getclass <- reactive({\n  getclass(.getdata())\n})\n\ngroupable_vars <- reactive({\n  .getdata() %>%\n    summarise_each(funs(is.factor(.) || is.logical(.) || lubridate::is.Date(.) || is.integer(.) ||\n                        ((n_distinct(., na_rm = TRUE)/n()) < .30))) %>%\n    {which(. == TRUE)} %>%\n    varnames()[.]\n})\n\ngroupable_vars_nonum <- reactive({\n  .getdata() %>%\n    summarise_each(funs(is.factor(.) || is.logical(.) || lubridate::is.Date(.) || is.integer(.) ||\n                   is.character(.))) %>%\n    {which(. == TRUE)} %>%\n    varnames()[.]\n})\n\n\n## used in compare proportions\ntwo_level_vars <- reactive({\n  .getdata() %>%\n    summarise_each(funs(n_distinct(., na_rm = TRUE))) %>%\n    { . == 2 } %>%\n    which(.) %>%\n    varnames()[.]\n})\n\n## used in visualize - don't plot Y-variables that don't vary\nvarying_vars <- reactive({\n  .getdata() %>%\n    summarise_each(funs(does_vary(.))) %>%\n    as.logical %>%\n    which %>%\n    varnames()[.]\n})\n\n## getting variable names in active dataset and their class\nvarnames <- reactive({\n  .getclass() %>% names %>%\n    set_names(., paste0(., \" {\", .getclass(), \"}\"))\n})\n\n## cleaning up the arguments for data_filter and defaults passed to report\nclean_args <- function(rep_args, rep_default = list()) {\n  if (!is.null(rep_args$data_filter)) {\n    if (rep_args$data_filter == \"\")\n      rep_args$data_filter  <- NULL\n    else\n      rep_args$data_filter %<>% gsub(\"\\\\n\",\"\", .) %>% gsub(\"\\\"\",\"\\'\",.)\n  }\n\n  if (length(rep_default) == 0) rep_default[names(rep_args)] <- \"\"\n\n  ## removing default arguments before sending to report feature\n  for (i in names(rep_args)) {\n    if (!any(is.language(rep_args[[i]])) && all(is.na(rep_args[[i]]))) {\n      rep_args[[i]] <- NULL\n      next\n    }\n    if (!all(is.symbol(rep_default[[i]])) && all(is_not(rep_default[[i]]))) next\n    if (length(rep_args[[i]]) == length(rep_default[[i]]) &&\n        all(rep_args[[i]] == rep_default[[i]])) rep_args[[i]] <- NULL\n  }\n\n  rep_args\n}\n\n## check if a variable is null or not in the selected data.frame\nnot_available <- function(x)\n  if (any(is.null(x)) || (sum(x %in% varnames()) < length(x))) TRUE else FALSE\n\n## check if a variable is null or not in the selected data.frame\navailable <- function(x) not_available(x) == FALSE\n\n## check if a button was NOT pressed\nnot_pressed <- function(x) if (is.null(x) || x == 0) TRUE else FALSE\n\npressed <- function(x) if (!is.null(x) && x > 0) TRUE else FALSE\n\n## check for duplicate entries\nhas_duplicates <- function(x)\n  if (length(unique(x)) < length(x)) TRUE else FALSE\n\n## is x some type of date variable\nis_date <- function(x) inherits(x, c('Date', 'POSIXlt', 'POSIXct'))\n\n## drop elements from .._args variables obtained using formals\nr_drop <- function(x, drop = c(\"dataset\",\"data_filter\")) x[-which(x %in% drop)]\n\n## convert a date variable to character for printing\nd2c <- function(x) if (is_date(x)) as.character(x) else x\n\n## truncate character fields for show_data_snippet\ntrunc_char <- function(x) if (is.character(x)) strtrim(x,40) else x\n\n## show a few rows of a dataframe\nshow_data_snippet <- function(dat = input$dataset, nshow = 7, title = \"\") {\n\n  n <- 0\n  {if (is.character(dat) && length(dat) == 1) getdata(dat, na.rm = FALSE) else dat} %>%\n    { n <<- nrow(.); . } %>%\n    slice(1:min(nshow,n)) %>%\n    mutate_each(funs(d2c)) %>%\n    mutate_each(funs(trunc_char)) %>%\n    xtable::xtable(.) %>%\n    print(type = 'html',  print.results = FALSE, include.rownames = FALSE,\n          sanitize.text.function = identity,\n          html.table.attributes = \"class='table table-condensed table-hover'\") %>%\n    paste0(title, .) %>%\n    {if (n <= nshow) . else paste0(.,'\\n<label>', nshow,' of ', nrprint(n,dec = 0), ' rows shown. See View-tab for details.</label>')} %>%\n    enc2utf8\n}\n\nsuggest_data <- function(text = \"\", dat = \"diamonds\")\n  paste0(text, \"For an example dataset go to Data > Manage, select 'examples' from the\\n'Load data of type' dropdown, and press the 'Load examples' button. Then\\nselect the \\'\", dat, \"\\' dataset.\")\n\n## function written by @wch https://github.com/rstudio/shiny/issues/781#issuecomment-87135411\ncapture_plot <- function(expr, env = parent.frame()) {\n  structure(\n    list(expr = substitute(expr), env = env),\n    class = \"capture_plot\"\n  )\n}\n\n## function written by @wch https://github.com/rstudio/shiny/issues/781#issuecomment-87135411\nprint.capture_plot <- function(x, ...) {\n  eval(x$expr, x$env)\n}\n\n################################################################\n## functions used to create Shiny in and outputs\n################################################################\n\n## textarea where the return key submits the content\nreturnTextAreaInput <- function(inputId, label = NULL, value = \"\") {\n  tagList(\n    tags$label(label, `for` = inputId),br(),\n    tags$textarea(value, id=inputId, type = \"text\", rows=\"2\",\n                  class=\"returnTextArea form-control\")\n  )\n}\n\nreturnTextInput <- function(inputId, label = NULL, value = \"\") {\n  tagList(\n    tags$label(label, `for` = inputId),\n    tags$input(id = inputId, type = \"text\", value = value,\n               class = \"returnTextInput form-control\")\n  )\n}\n\nplot_width <- function()\n  if (is.null(input$viz_plot_width)) r_data$plot_width else input$viz_plot_width\n\nplot_height <- function()\n  if (is.null(input$viz_plot_height)) r_data$plot_height else input$viz_plot_height\n\n## fun_name is a string of the main function name\n## rfun_name is a string of the reactive wrapper that calls the main function\n## out_name is the name of the output, set to fun_name by default\nregister_print_output <- function(fun_name, rfun_name,\n                                  out_name = fun_name) {\n\n  ## Generate output for the summary tab\n  output[[out_name]] <- renderPrint({\n    ## when no analysis was conducted (e.g., no variables selected)\n    get(rfun_name)() %>%\n      {if (is.character(.)) cat(.,\"\\n\") else .} %>%\n      rm(.)\n    # ret <- get(rfun_name)()\n    # if (is.character(ret)) cat(ret,\"\\n\") else rm(ret)\n    # rm(ret)\n  })\n  return(invisible())\n}\n\n# fun_name is a string of the main function name\n# rfun_name is a string of the reactive wrapper that calls the main function\n# out_name is the name of the output, set to fun_name by default\nregister_plot_output <- function(fun_name, rfun_name,\n                                 out_name = fun_name,\n                                 width_fun = \"plot_width\",\n                                 height_fun = \"plot_height\") {\n\n  ## Generate output for the plots tab\n  output[[out_name]] <- renderPlot({\n\n    ## when no analysis was conducted (e.g., no variables selected)\n    get(rfun_name)() %>% { if (is.null(.)) \" \" else . } %>%\n    { if (is.character(.)) {\n        plot(x = 1, type = 'n', main = paste0(\"\\n\\n\\n\\n\\n\\n\\n\\n\",.) ,\n             axes = FALSE, xlab = \"\", ylab = \"\")\n      } else {\n        withProgress(message = 'Making plot', value = 0, print(.))\n      }\n    }\n  }, width=get(width_fun), height=get(height_fun))\n\n  return(invisible())\n}\n\nplot_downloader <- function(plot_name, width = plot_width(),\n                            height = plot_height(), pre = \".plot_\", po = \"dl_\") {\n\n  ## link and output name\n  lnm <- paste0(po, plot_name)\n\n  ## create an output\n  output[[lnm]] <- downloadHandler(\n    filename = function() { paste0(plot_name, \".png\") },\n    content = function(file) {\n\n        ## download graphs in higher resolution than shown in GUI (504 dpi)\n        pr <- 7\n        png(file=file, width = width*pr, height = height*pr, res=72*pr)\n          print(get(paste0(pre, plot_name))())\n          # print(isolate(get(paste0(pre, plot_name))()))\n        dev.off()\n    }\n  )\n  downloadLink(lnm, \"\", class = \"fa fa-download alignright\")\n}\n\nstat_tab_panel <- function(menu, tool, tool_ui, output_panels,\n                           data = input$dataset) {\n  sidebarLayout(\n    sidebarPanel(\n      wellPanel(\n        HTML(paste(\"<label><strong>Menu:\", menu, \"</strong></label><br>\")),\n        HTML(paste(\"<label><strong>Tool:\", tool, \"</strong></label><br>\")),\n        if (!is.null(data))\n          HTML(paste(\"<label><strong>Data:\", data, \"</strong></label>\"))\n      ),\n      uiOutput(tool_ui)\n    ),\n    mainPanel(\n      output_panels\n    )\n  )\n}\n\n################################################################\n## functions used for app help\n################################################################\nhelp_modal <- function(modal_title, link, help_file) {\n  sprintf(\"<div class='modal fade' id='%s' tabindex='-1' role='dialog' aria-labelledby='%s_label' aria-hidden='true'>\n            <div class='modal-dialog'>\n              <div class='modal-content'>\n                <div class='modal-header'>\n                  <button type='button' class='close' data-dismiss='modal' aria-label='Close'><span aria-hidden='true'>&times;</span></button>\n                  <h4 class='modal-title' id='%s_label'>%s</h4>\n                  </div>\n                <div class='modal-body'>%s<br>\n                  &copy; Vincent Nijs (2016) <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/4.0/' target='_blank'><img alt='Creative Commons License' style='border-width:0' src ='imgs/80x15.png' /></a>\n                </div>\n              </div>\n            </div>\n           </div>\n           <i title='Help' class='fa fa-question' data-toggle='modal' data-target='#%s'></i>\",\n           link, link, link, modal_title, help_file, link) %>%\n  enc2utf8 %>% HTML\n}\n\nhelp_and_report <- function(modal_title, fun_name, help_file) {\n  sprintf(\"<div class='modal fade' id='%s_help' tabindex='-1' role='dialog' aria-labelledby='%s_help_label' aria-hidden='true'>\n            <div class='modal-dialog'>\n              <div class='modal-content'>\n                <div class='modal-header'>\n                  <button type='button' class='close' data-dismiss='modal' aria-label='Close'><span aria-hidden='true'>&times;</span></button>\n                  <h4 class='modal-title' id='%s_help_label'>%s</h4>\n                  </div>\n                <div class='modal-body'>%s<br>\n                  &copy; Vincent Nijs (2016) <a rel='license' href='http://creativecommons.org/licenses/by-nc-sa/4.0/' target='_blank'><img alt='Creative Commons License' style='border-width:0' src ='imgs/80x15.png' /></a>\n                </div>\n              </div>\n            </div>\n           </div>\n           <i title='Help' class='fa fa-question alignleft' data-toggle='modal' data-target='#%s_help'></i>\n           <i title='Report results' class='fa fa-edit action-button shiny-bound-input alignright' href='#%s_report' id='%s_report'></i>\n           <div style='clear: both;'></div>\",\n          fun_name, fun_name, fun_name, modal_title, help_file, fun_name, fun_name, fun_name) %>%\n  enc2utf8 %>% HTML %>% withMathJax\n}\n\n## function to render .md files to html\ninclMD <- function(path) {\n  markdown::markdownToHTML(path, fragment.only = TRUE, options = \"\",\n                           stylesheet = \"\")\n}\n\ninclRmd <- function(path, r_env = parent.frame()) {\n  paste(readLines(path, warn = FALSE), collapse = '\\n') %>%\n  knitr::knit2html(text = ., fragment.only = TRUE, quiet = TRUE,\n    envir = r_env, options = \"\", stylesheet = \"\") %>%\n    HTML %>% withMathJax\n}\n\n## used by View - remove or use more broadly\nfind_env <- function(dataset) {\n  if (exists(\"r_env\")) {\n    r_env\n  } else if (exists(\"r_data\") && !is.null(r_data[[dataset]])) {\n    pryr::where(\"r_data\")\n  } else if (exists(dataset)) {\n    pryr::where(dataset)\n  }\n}\n\n## used by View - remove or use more broadly\nsave2env <- function(dat, dataset,\n                     dat_name = dataset,\n                     mess = \"\") {\n\n  env <- find_env(dataset)\n  env$r_data[[dat_name]] <- dat\n  if (dataset != dat_name) {\n    cat(paste0(\"Dataset r_data$\", dat_name, \" created in \", environmentName(env), \" environment\\n\"))\n    env$r_data[['datasetlist']] <- c(dat_name, env$r_data[['datasetlist']]) %>% unique\n  } else {\n    cat(paste0(\"Dataset r_data$\", dataset, \" changed in \", environmentName(env), \" environment\\n\"))\n  }\n\n  ## set to previous description\n  env$r_data[[paste0(dat_name,\"_descr\")]] <- env$r_data[[paste0(dataset,\"_descr\")]]\n\n  if (mess != \"\")\n    env$r_data[[paste0(dat_name,\"_descr\")]] %<>% paste0(\"\\n\\n\",mess)\n}\n\n## cat to file\n## use with tail -f ~/r_cat.txt in a terminal\ncf <- function(...) {\n  cat(paste0(\"\\n--- called from: \", environmentName(parent.frame()), \" (\", lubridate::now(), \")\\n\"), file = \"~/r_cat.txt\", append = TRUE)\n  out <- paste0(capture.output(...), collapse = \"\\n\")\n  cat(\"--\\n\", out, \"\\n--\", sep = \"\\n\", file = \"~/r_cat.txt\", append = TRUE)\n}\n\n## use the value in the input list if available and update r_state\nstate_init <- function(var, init = \"\") {\n  isolate({\n    ivar <- input[[var]]\n    if (var %in% names(input)) {\n      ivar <- input[[var]]\n      if (is.null(ivar)) r_state[[var]] <<- NULL\n    } else {\n      ivar <- .state_init(var, init)\n      # r_state[[var]] <<- ivar\n    }\n    ivar\n  })\n}\n\n.state_init <- function(var, init = \"\") {\n  rs <- r_state[[var]]\n  if (is_empty(rs)) init else rs\n}\n\nstate_single <- function(var, vals, init = character(0)) {\n  isolate({\n    ivar <- input[[var]]\n    if (var %in% names(input) && is.null(ivar)) {\n      r_state[[var]] <<- NULL\n      ivar\n    } else if (available(ivar) && all(ivar %in% vals)) {\n      if (length(ivar) > 0) r_state[[var]] <<- ivar\n      ivar\n    } else if (available(ivar) && any(ivar %in% vals)) {\n       ivar[ivar %in% vals]\n    } else {\n      if (length(ivar) > 0 && all(ivar %in% c(\"None\",\"none\",\".\",\"\")))\n        r_state[[var]] <<- ivar\n      .state_single(var, vals, init = init)\n    }\n    # .state_single(var, vals, init = init)\n  })\n}\n\n.state_single <- function(var, vals, init = character(0)) {\n  rs <- r_state[[var]]\n  if (is_empty(rs)) init else vals[vals == rs]\n}\n\nstate_multiple <- function(var, vals, init = character(0)) {\n  isolate({\n    ivar <- input[[var]]\n    if (var %in% names(input) && is.null(ivar)) {\n      r_state[[var]] <<- NULL\n      ivar\n    } else if (available(ivar) && all(ivar %in% vals)) {\n      if (length(ivar) > 0) r_state[[var]] <<- ivar\n      ivar\n    } else if (available(ivar) && any(ivar %in% vals)) {\n       ivar[ivar %in% vals]\n    } else {\n      if (length(ivar) > 0 && all(ivar %in% c(\"None\",\"none\",\".\",\"\")))\n        r_state[[var]] <<- ivar\n      .state_multiple(var, vals, init = init)\n    }\n    # .state_multiple(var, vals, init = init)\n  })\n}\n\n.state_multiple <- function(var, vals, init = character(0)) {\n  rs <- r_state[[var]]\n  ## \"a\" %in% character(0) --> FALSE, letters[FALSE] --> character(0)\n  if (is_empty(rs)) vals[vals %in% init] else vals[vals %in% rs]\n}\n\n# use_input_nonvar <- function(var, choices = c(), init = \"\", fun = \"state_init\") {\n#   isolate({\n#     ivar <- input[[var]]\n#     if (var %in% names(input) && is.null(ivar)) {\n#       r_state[[var]] <<- NULL\n#       ivar\n#     } else if (!is_empty(ivar) && all(ivar %in% choices)) {\n#       if (length(ivar) > 0) r_state[[var]] <<- ivar\n#       ivar\n#     } else if (!is_empty(ivar) && length(choices) == 0) {\n#       if (length(ivar) > 0) r_state[[var]] <<- ivar\n#       ivar\n#     } else {\n#       if (length(ivar) > 0 && all(ivar %in% c(\"None\",\"none\",\".\",\"\")))\n#         r_state[[var]] <<- ivar\n#       get(fun)(var, init)\n#     }\n#   })\n# }\n\n# use_input <- function(var, vars = \"\", init = character(0), fun = \"state_single\") {\n#   isolate({\n#     ivar <- input[[var]]\n#     if (var %in% names(input) && is.null(ivar)) {\n#       r_state[[var]] <<- NULL\n#       ivar\n#     } else if (available(ivar) && all(ivar %in% vars)) {\n#       if (length(ivar) > 0) r_state[[var]] <<- ivar\n#       ivar\n#     } else if (available(ivar) && any(ivar %in% vars)) {\n#        ivar[ivar %in% vars]\n#     } else {\n\n#       if (length(ivar) > 0 && all(ivar %in% c(\"None\",\"none\",\".\",\"\"))) r_state[[var]] <<- ivar\n\n#       if (fun == \"state_init\")\n#         sel <- get(fun)(var, init)\n#       else\n#         sel <- get(fun)(var, vars, init)\n\n#       sel\n#     }\n#   })\n# }\n\n\n# use_input <- function(var, vars = \"\", init = character(0), fun = \"state_single\") {\n#   isolate({\n#     ivar <- input[[var]]\n#     if (var %in% names(input) && is.null(ivar)) {\n#       r_state[[var]] <<- NULL\n#       ivar\n#     } else if (available(ivar) && all(ivar %in% vars)) {\n#       if (length(ivar) > 0) r_state[[var]] <<- ivar\n#       ivar\n#     } else if (available(ivar) && any(ivar %in% vars)) {\n#        ivar[ivar %in% vars]\n#     } else {\n\n#       if (length(ivar) > 0 && all(ivar %in% c(\"None\",\"none\",\".\",\"\")))\n#         r_state[[var]] <<- ivar\n\n#       if (fun == \"state_init\")\n#         sel <- get(fun)(var, init)\n#       else\n#         sel <- get(fun)(var, vars, init)\n\n#       sel\n#     }\n#   })\n# }\n\n\n# observe({\n#   print(\"****\")\n#   print(\"sm_alternative\" %in% names(input))\n#   print(r_state[[\"sm_alternative\"]])\n#   print(input[[\"sm_alternative\"]])\n#   print(\"****\")\n# })\n",
    "created" : 1460623775626.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1498909091",
    "id" : "3645CBE1",
    "lastKnownWriteTime" : 1460487092,
    "last_content_update" : 1460487092,
    "path" : "~/Github/ACIT-Team-Reporting_Radiant/radiant.R",
    "project_path" : "radiant.R",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}